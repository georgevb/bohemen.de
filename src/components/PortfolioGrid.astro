---
import { getCollection } from 'astro:content';

const portfolio = await getCollection('portfolio');
const publishedPortfolio = portfolio.filter(item => item.data.published).sort((a, b) => a.data.order - b.data.order);

const images = publishedPortfolio.map(item => ({
  src: item.data.image,
  alt: item.data.alt || item.data.title,
  title: item.data.title,
  category: item.data.category,
  size: item.data.size || 'medium'
}));
---

<section id="portfolio" class="py-20 md:py-32 bg-white">
  <div class="container-custom">
    <h2 class="font-script text-5xl md:text-6xl text-center mb-16 text-gray-800">Portfolio</h2>
    
    <!-- Category Filter -->
    <div class="flex justify-center flex-wrap gap-4 mb-16">
      <button class="category-filter active px-6 py-3 text-sm font-medium transition-colors uppercase tracking-wider" data-category="all">
        All
      </button>
      <button class="category-filter px-6 py-3 text-sm font-medium transition-colors uppercase tracking-wider" data-category="wedding">
        Weddings
      </button>
      <button class="category-filter px-6 py-3 text-sm font-medium transition-colors uppercase tracking-wider" data-category="portrait">
        Portraits
      </button>
      <button class="category-filter px-6 py-3 text-sm font-medium transition-colors uppercase tracking-wider" data-category="event">
        Events
      </button>
      <button class="category-filter px-6 py-3 text-sm font-medium transition-colors uppercase tracking-wider" data-category="nature">
        Nature
      </button>
    </div>

    <!-- Masonry Grid -->
    <div class="columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-4 space-y-4" id="portfolio-grid">
      {images.map((image, index) => (
        <div 
          class={`portfolio-item cursor-pointer group break-inside-avoid mb-4 ${
            image.size === 'large' ? 'md:col-span-2' : 
            image.size === 'small' ? '' : ''
          }`}
          data-category={image.category}
          data-index={index}
        >
          <div class="relative overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
            <img
              src={image.src}
              alt={image.alt}
              class="w-full h-auto transition-transform duration-500 group-hover:scale-105"
              loading="lazy"
            />
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
              <span class="text-white text-lg font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                {image.title}
              </span>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<!-- Lightbox -->
<div id="lightbox" class="hidden fixed inset-0 bg-black bg-opacity-95 z-50 flex items-center justify-center">
  <button id="lightbox-close" class="absolute top-4 right-4 text-white text-4xl z-10 hover:text-gray-300 transition-colors">&times;</button>
  <button id="lightbox-prev" class="absolute left-4 top-1/2 -translate-y-1/2 text-white text-4xl hover:text-gray-300 transition-colors">‹</button>
  <button id="lightbox-next" class="absolute right-4 top-1/2 -translate-y-1/2 text-white text-4xl hover:text-gray-300 transition-colors">›</button>
  <img id="lightbox-image" src="" alt="" class="max-w-[90%] max-h-[90%] object-contain" />
</div>

<style>
  .category-filter {
    @apply text-gray-600 hover:text-gray-800 border-b-2 border-transparent;
  }
  
  .category-filter.active {
    @apply text-gray-800 border-gray-800;
  }
</style>

<script define:vars={{ images }}>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Category filtering
    const filterButtons = document.querySelectorAll('.category-filter');
    const portfolioItems = document.querySelectorAll('.portfolio-item');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.dataset.category;
        
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        portfolioItems.forEach(item => {
          if (category === 'all' || item.dataset.category === category) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
      });
    });

    // Lightbox functionality
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxClose = document.getElementById('lightbox-close');
    const lightboxPrev = document.getElementById('lightbox-prev');
    const lightboxNext = document.getElementById('lightbox-next');
    let currentIndex = 0;

    // Ensure lightbox is hidden on load
    if (lightbox) {
      lightbox.classList.add('hidden');
    }

    // Only add event listeners if elements exist
    if (lightbox && lightboxImage && lightboxClose) {
      portfolioItems.forEach((item, index) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          currentIndex = parseInt(item.dataset.index) || index;
          showLightbox();
        });
      });

      function showLightbox() {
        if (images && images[currentIndex]) {
          const image = images[currentIndex];
          lightboxImage.src = image.src;
          lightboxImage.alt = image.alt;
          lightbox.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      }

      function hideLightbox() {
        lightbox.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }

      function nextImage() {
        if (images && images.length > 0) {
          currentIndex = (currentIndex + 1) % images.length;
          showLightbox();
        }
      }

      function prevImage() {
        if (images && images.length > 0) {
          currentIndex = (currentIndex - 1 + images.length) % images.length;
          showLightbox();
        }
      }

      // Event listeners
      lightboxClose.addEventListener('click', hideLightbox);
      
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) hideLightbox();
      });
      
      if (lightboxNext) lightboxNext.addEventListener('click', nextImage);
      if (lightboxPrev) lightboxPrev.addEventListener('click', prevImage);

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!lightbox.classList.contains('hidden')) {
          if (e.key === 'Escape') hideLightbox();
          if (e.key === 'ArrowRight') nextImage();
          if (e.key === 'ArrowLeft') prevImage();
        }
      });
    }
  });
</script>