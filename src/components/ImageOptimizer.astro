---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy', 
  class: className = '',
  sizes = '100vw'
} = Astro.props;

// Generate srcset for responsive images using Cloudinary transformations
const generateSrcSet = (url: string) => {
  if (url.includes('unsplash.com')) {
    const baseUrl = url.split('?')[0];
    return `
      ${baseUrl}?w=640&q=80 640w,
      ${baseUrl}?w=768&q=80 768w,
      ${baseUrl}?w=1024&q=80 1024w,
      ${baseUrl}?w=1280&q=80 1280w,
      ${baseUrl}?w=1536&q=80 1536w,
      ${baseUrl}?w=1920&q=80 1920w
    `.trim().replace(/\s+/g, ' ');
  }
  return '';
};

const srcSet = generateSrcSet(src);
---

<picture>
  <source
    type="image/webp"
    srcset={srcSet}
    sizes={sizes}
  />
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={`${className} transition-opacity duration-300`}
    decoding="async"
    srcset={srcSet}
    sizes={sizes}
    onload="this.classList.add('opacity-100')"
    onerror="this.src='/placeholder.jpg'"
  />
</picture>

<style>
  img {
    @apply opacity-0;
  }
  
  img.opacity-100 {
    @apply opacity-100;
  }
</style>